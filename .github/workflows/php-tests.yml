name: PHP Tests — DB_PASS modes

# Summary:
# This workflow runs PHPUnit twice using a matrix over DB_PASS:
#  - First run: DB_PASS is empty (simulates a missing password)
#  - Second run: DB_PASS is "test1234" (sample password)
#
# Notes on context warnings:
# - Avoid referencing secrets or complex expressions inside the "services" block
#   because some linters / the Actions engine may emit "context access might be invalid".
# - To prevent those warnings we use static values for the MySQL service configuration
#   and supply the application DB_PASS via the job-level env (matrix).
#
# You can adjust MYSQL_ROOT_PASSWORD / MYSQL_DATABASE below if your tests expect other values.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  php-tests:
    runs-on: ubuntu-latest

    # Matrix: run twice with DB_PASS empty and sample value
    strategy:
      matrix:
        db_pass: [ "", "test1234" ]

    # Job-level environment variables. DB_PASS is taken from the matrix.
    env:
      # These are safe defaults for CI. Adjust if your tests require different values.
      DB_HOST: 127.0.0.1
      DB_NAME: carwash_db
      DB_USER: root
      DB_PASS: ${{ matrix.db_pass }}

    services:
      # Start a MySQL service for the tests. We use static credentials here to avoid
      # referencing contexts (secrets/matrix) inside the services block which can trigger warnings.
      mysql:
        image: mysql:8.0
        # Static env avoids "context access might be invalid" warnings in the services block.
        env:
          MYSQL_ROOT_PASSWORD: test1234
          MYSQL_DATABASE: carwash_db
        ports:
          - 3306:3306
        # Allow Docker to run with standard options
        options: >-
          --health-cmd="mysqladmin ping --silent -h 127.0.0.1 -uroot -ptest1234"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup PHP (8.1). Change php-version to a newer stable if desired.
      - name: Setup PHP
        uses: shivammathur/setup-php@v4
        with:
          php-version: '8.1'
          coverage: none

      # Install mysql client so we can wait for the service to be ready
      - name: Install MySQL client (for health checks)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y default-mysql-client

      # Wait for MySQL service to become available (uses static root password above)
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..60}; do
            if mysqladmin ping -h127.0.0.1 -uroot -ptest1234 --silent; then
              echo "MySQL is available"
              break
            fi
            echo "Waiting 2s for MySQL..."
            sleep 2
            if [ $i -eq 60 ]; then
              echo "MySQL did not become ready in time"
              exit 1
            fi
          done

      # Report which DB_PASS mode is active (explicit human-friendly log)
      - name: Report active DB_PASS mode
        shell: bash
        run: |
          echo "=== CI: DB_PASS MODE REPORT ==="
          if [ -z "${DB_PASS}" ]; then
            echo "DB_PASS is EMPTY (simulating missing password)"
          else
            echo "DB_PASS is SET"
          fi
          # Show the raw matrix value for clarity (non-secret in this workflow)
          echo "Matrix raw value: '${{ matrix.db_pass }}'"

      # PHP one-liner to print getenv("DB_PASS") for verification in Actions logs
      - name: "PHP: getenv('DB_PASS') verification"
        run: |
          php -r 'echo "PHP: getenv(\"DB_PASS\") => " . (getenv("DB_PASS")===false? "<not set>" : (strlen(getenv("DB_PASS"))===0? "<empty>" : "<set: ".getenv("DB_PASS").">")) . PHP_EOL;'

      # Install Composer dependencies
      - name: Install PHP dependencies (Composer)
        run: |
          composer install --no-interaction --prefer-dist

      # Run phpunit but do not fail the job if tests fail — keep diagnostic logs
      - name: Run PHPUnit (continue-on-error for diagnostics)
        continue-on-error: true
        run: |
          vendor/bin/phpunit --configuration phpunit.xml.dist || true

      # Final note in logs
      - name: CI final note
        run: |
          echo "Completed CI job for DB_PASS mode. Check above logs for DB_PASS mode and php getenv output."
